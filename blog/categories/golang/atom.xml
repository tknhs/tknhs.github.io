<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | tknhs's blog]]></title>
  <link href="http://tknhs.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://tknhs.github.io/"/>
  <updated>2015-03-11T22:12:12+09:00</updated>
  <id>http://tknhs.github.io/</id>
  <author>
    <name><![CDATA[tknhs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[液晶テレビ AQUOS を PC から制御する]]></title>
    <link href="http://tknhs.github.io/blog/2015/01/aquostv-control/"/>
    <updated>2015-01-23T21:21:46+09:00</updated>
    <id>http://tknhs.github.io/blog/2015/01/aquostv-control</id>
    <content type="html"><![CDATA[<p>irMigician を手に入れてスマホから家電を操作できるようになって，今後は操作したい家電をすべて赤外線対応させればいいんじゃないかと思考停止に陥ってたところ，後輩からうちのテレビにPCから制御可能な端子が付いていることを教えてもらった．</p>

<p>そんな変態テレビを PC から制御するライブラリを作成した（している）話．</p>

<!-- more -->


<h2>SHARP AQUOS TV</h2>

<p>そのテレビを販売しているのは，SHARP．<br/>
テレビの後ろの端子群に用途のよくわからない端子がついていたらそれ．<br/>
RS232C で PC と接続してシリアル通信にて使用するが，普段リモコンを使って行うようなこととをする分には十分すぎるコマンドが用意されている．</p>

<p>そして，PC から制御できるという情報は取り扱い説明書にちょこっと載ってるだけなので普通は気づかない．ただ，最近のテレビにはその端子はなくなっている？と思って調べたら，LAN ポートから操作できるようになったっぽい（LAN ポートの方は持ってないので以降は RS232C ベースの話）．</p>

<ul>
<li><a href="http://www.sharp.co.jp/support/aquos/product/">液晶テレビ AQUOS（アクオス）｜機種別サポート情報</a> &lt;- 比較的最近発売された製品</li>
<li><a href="http://www.sharp.co.jp/support/aquos/product/index_b.html#upper_37">液晶テレビ AQUOSサポートステーション｜機種別情報</a> &lt;- 古めの製品</li>
</ul>


<p>テレビに RS232C 端子が付いているか確認するにはリンク先から自分の持っているテレビの型番のリンクをクリックし，背面端子配置図を見れば良い．</p>

<p>例）LC-20E5／LC-16E5 背面図<br/>
<a href="http://www.sharp.co.jp/support/aquos/product/lc20_16e5_back.html">液晶テレビ（AQUOS）｜LC-20E5／LC-16E5　背面図：シャープ</a>より引用</p>

<div style='text-align: center'>
<img alt='TV back view' style='text-align: center;' width='450' src='http://tknhs.github.io/images/2015-01-23-aquostv-control/af6604362bb759b0b9724b10431b5592.jpg' />
</div>


<p></p>

<p>利用時に必要なケーブル類は <a href="http://www.amazon.co.jp/s/?_encoding=UTF8&amp;camp=247&amp;creative=7399&amp;field-keywords=rs232c%20%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB&amp;linkCode=ur2&amp;sprefix=rs232%2Caps%2C269&amp;tag=brsmc-22&amp;url=search-alias%3Daps">RS232C クロスケーブル | amazon</a> と <a href="http://www.amazon.co.jp/s/?_encoding=UTF8&amp;camp=247&amp;creative=7399&amp;field-keywords=rs232c%20usb%20%E5%A4%89%E6%8F%9B%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB&amp;linkCode=ur2&amp;rh=i%3Aaps%2Ck%3Ars232c%20usb%20%E5%A4%89%E6%8F%9B%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB&amp;sprefix=rs232c%20usb%20%E5%A4%89%E6%8F%9B%2Caps%2C256&amp;tag=brsmc-22&amp;url=search-alias%3Daps">RS232C USB 変換ケーブル | amazon</a> だが，今回は後々 <a href="http://www.intel.co.jp/content/www/jp/ja/do-it-yourself/edison.html">Intel Edison</a> に組み込むことを考慮して市販のものは買わなかった．</p>

<p>ということで，後輩に手伝ってもらって（ほとんどやってもらった），Edison でも使えるように RS232C-UART ケーブルと UART-MicroB ケーブルを作った．</p>

<div style='text-align: center'>
<img alt='MicroB-UART FRONT VIEW' style='text-align: center;' width='350' src='http://tknhs.github.io/images/2015-01-23-aquostv-control/fc39f3a1ffd2dac65612a1c4888240ef.jpg' />
<img alt='MicroB-UART BACK VIEW' style='text-align: center;' width='350' src='http://tknhs.github.io/images/2015-01-23-aquostv-control/ca3922aa84ab08166d613003de40750d.jpg' />
</div>


<p></p>

<h2>aquostv</h2>

<p><a href="https://github.com/tknhs/aquostv">tknhs/aquostv</a></p>

<p>そんなテレビを PC から制御する golang のライブラリ aquostv を作成中．機種によってコマンドの詳細が違うので，今のところは LC-20E5 / LC-16E5 のみの対応になってる（他の機種でも使える機能はあると思う）．</p>

<p>また，常にPCから制御したい場合には，本体の設定をいじっておく必要がある．<br/>
メニュー -&gt; 本体設定 -&gt; クイック起動設定 -&gt; する（常に有効）．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang で irMagicain のライブラリを書いた]]></title>
    <link href="http://tknhs.github.io/blog/2014/12/go-irmagician/"/>
    <updated>2014-12-27T00:43:18+09:00</updated>
    <id>http://tknhs.github.io/blog/2014/12/go-irmagician</id>
    <content type="html"><![CDATA[<p>タイトル通りだけど，golang で irMagician のライブラリ go-irMagician を書いた．</p>

<!--more-->


<h2>irMagician とは</h2>

<p><a href="http://www.omiya-giken.com/">大宮技研 合同会社</a>が販売している赤外線学習リモコンで，以下のような特徴がある．</p>

<div style='text-align: center'>
<img alt='irMagicain front' style='text-align: center;' width='345' height='250' src='http://tknhs.github.io/images/2014-12-27-go-irmagician/da261ac114c8d809b3c9c910e88fb80b.jpg' />
<img alt='irMagicain back' style='text-align: center;' width='325' height='250' src='http://tknhs.github.io/images/2014-12-27-go-irmagician/62d46f11a19e32c3d0dea8ebd3ac507a.jpg' />
</div>


<p></p>

<ul>
<li>USB 経由で PC と接続（対応OS：Windows, Mac OS X, Linux 等）</li>
<li>超小型・低価格

<ul>
<li>キット（2014/12/27 現在）

<ul>
<li>irMagician 1,980円（送料：国内・税込み）</li>
</ul>
</li>
<li>完成品（2014/12/27 現在）

<ul>
<li>irMagician (Windows, Linux, MacOSX 10.9.5 以前) 3,980円（送料：国内・税込み）</li>
<li>irMagician T(Windows, Linux, MacOSX 10.9.5 以前) 4,480円（送料：国内・税込み）</li>
</ul>
</li>
</ul>
</li>
<li>家電の赤外線データをキャプチャして家電に向かって送信すれば良い</li>
<li>キャプチャした家電の赤外線データをローカルに保存しておけば，そのデータを読みだして利用することが可能</li>
</ul>


<p>詳しくは <a href="http://www.omiya-giken.com/?page_id=837">irMagician – 高機能／低価格赤外線リモコン</a> からどうぞ．</p>

<h2>go-irMagician</h2>

<p>irMagicain はシリアル通信でコマンドを送信することにより制御する（<a href="http://www.omiya-giken.com/?page_id=889">コマンド一覧</a>）．
実際に使うときにはプログラムを組むと思うのだけれど，公式のサンプルは python で書かれている（<a href="http://www.omiya-giken.com/?page_id=1231">プログラム例</a>）．</p>

<p>ただ，今回は golang で家電操作のプログラムを組もうと思っていた．さらに，オレオレ家電操作プログラムに埋め込むだけじゃなくて，せっかくなら使い回しができるようにライブラリを作ることにした．</p>

<p>できあがったものは github で公開してみた．<a href="https://github.com/tknhs/go-irMagician">tknhs/go-irMagician</a><br/>
（初めて golang のライブラリを書いたので，突っ込んでもらえると嬉しい．）</p>

<p>とりあえず，使いそうな機能は実装した．</p>

<ul>
<li>室温を取得（ t コマンド）</li>
<li>リモコンから受信した赤外線データを irMagician 内部に保存（ c コマンド）</li>
<li>irMagician 内部に保存してある赤外線データを送信（ p コマンド）</li>
<li>irMagician 内部に保存してある赤外線データをローカルに保存</li>
<li>ローカルに保存してある赤外線データを読み込んで送信</li>
</ul>


<p>ドキュメント： <a href="https://godoc.org/github.com/tknhs/go-irMagician">GoDoc</a><br/>
サンプル： <a href="https://github.com/tknhs/go-irMagician/tree/master/example">Example</a></p>

<p>次回ぐらいに irMagician を使って今動いてるものを書くかもしれない．<br/>
<del>ただ，あんまりスマートじゃないので再設計したものを実装し直してから書くかも．</del></p>

<p><strong>2014/12/30 追記</strong><br/>
書いた -&gt; <a href="/blog/2014/12/riemoh">家電を外出先から制御する俺得アプリを作った</a></p>
]]></content>
  </entry>
  
</feed>
